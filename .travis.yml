language: cpp

matrix:
    include:
        - name: "Linux, Debug"
          os: linux
          dist: xenial
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Debug"
              - CMAKE_TOOLCHAIN_FILE_NAME=gcc-cxx14-c11.cmake
              - Qt5_DIR="/usr/lib/x86_64-linux-gnu/cmake/Qt5"
              - CTEST_REGEXP="Tests$"
        - name: "Linux, Release"
          os: linux
          dist: xenial
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Release"
              - CMAKE_TOOLCHAIN_FILE_NAME=gcc-cxx14-c11.cmake
              - Qt5_DIR="/usr/lib/x86_64-linux-gnu/cmake/Qt5"
              - CTEST_REGEXP="Tests$"
        - name: "macOS, Debug"
          os: osx
          osx_image: xcode10.1
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Debug"
              - CMAKE_TOOLCHAIN_FILE_NAME=clang-cxx14.cmake
              - Qt5_DIR="/usr/local/opt/qt/lib/cmake/Qt5"
              - CTEST_REGEXP="Tests$"
        - name: "macOS, Release"
          os: osx
          osx_image: xcode10.1
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_BUILD_TYPE="Release"
              - CMAKE_TOOLCHAIN_FILE_NAME=clang-cxx14.cmake
              - Qt5_DIR="/usr/local/opt/qt/lib/cmake/Qt5"
              - CTEST_REGEXP="Tests$"

env:
    global:
        - CTEST_LOG_REGEXP="=== EVENT \#\|SwappedVector\|\[\([a-zA-Z]\+\)\(\/[a-zA-Z0-9]\+\)\?\]"

addons:
    apt: # Linux
        packages:
            - build-essential
            - cmake
            - git
            - qtbase5-dev
            - unzip
            - wget
            - lcov
        sources:
            - ubuntu-toolchain-r-test
    homebrew: # macOS
        packages:
            - cmake
            - git
            - qt5
            - lcov

cache:
    directories:
        - $HOME/.hunter

script:
    - mkdir ./build && cd ./build
    - >
        cmake -G "$CMAKE_GENERATOR_NAME"
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
        -DCMAKE_TOOLCHAIN_FILE=cmake/polly/$CMAKE_TOOLCHAIN_FILE_NAME
        -DBUILD_ALL:BOOL=TRUE
        ..
    - cmake --build . --config $CMAKE_BUILD_TYPE -- -j 2
    - ctest -C $CMAKE_BUILD_TYPE -V -j 2 -R "$CTEST_REGEXP" | grep --line-buffered -i -v "$CTEST_LOG_REGEXP"
    - cpack -C $CMAKE_BUILD_TYPE

after_success:
    - |
        if [ "$CMAKE_BUILD_TYPE" = "Release" ]; then
            echo "Code-coverage is only available for debug builds. Skipping..."
        else
            COVERAGE_FILE="$TRAVIS_BUILD_DIR/build/coverage.info"
            echo "coverage.info: $COVERAGE_FILE"
            lcov --capture --directory . --output-file $COVERAGE_FILE
            lcov --remove $COVERAGE_FILE "/Applications/Xcode*" "/usr/*" "*/boost/*" "*/_ExternalProjects/*" --output-file $COVERAGE_FILE
            lcov --list $COVERAGE_FILE
            bash <(curl -s https://codecov.io/bash) -f $COVERAGE_FILE || echo "Upload to codecov.io FAILED"
        fi
